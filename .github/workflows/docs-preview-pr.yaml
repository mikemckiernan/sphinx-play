name: docs-preview-pr

on:
  workflow_run:
    workflows: [build]
    types: [completed]
    #branches: [main]

env:
  WF_ID: ${{ github.event.workflow_run.id }}

jobs:

  # Always determine if GitHub Pages are configured for this repo.
  get-gh-pages-url:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.api-resp.outputs.html_url }}
      branch: ${{ steps.api-resp.outputs.branch }}
    steps:
      - name: Check for GitHub Pages
        id: api-resp
        uses: actions/github-script@v5
        with:
          script: |
            const pages_url = [process.env.GITHUB_API_URL, "repos", process.env.GITHUB_REPOSITORY, "pages"].join("/")
            console.log("Request to GitHub API for GitHub Pages URL: " + pages_url)
            try {
              const resp = await github.request(pages_url)
              if (resp.status == "200") {
                console.log("GitHub Pages are configured and available at: " + resp.data.html_url)
                console.log("  ..and deployed from branch: " + resp.data.source.branch)
                core.setOutput('html_url', resp.data.html_url)
                core.setOutput('branch', resp.data.source.branch)
                return
              }
              console.log(resp)
            } catch (err) {
              console.log("Request to GitHub API for Pages failed with message: " + err)
            }
            core.setOutput('html_url', '')
            core.setOutput('branch', '')``

  # Identify the dir for the HTML.
  store-html:
    runs-on: ubuntu-latest
    needs: [get-gh-pages-url]
    if: needs.get-gh-pages-url.outputs.url != ''
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-gh-pages-url.outputs.branch }}
      - name: Download artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh run view "${WF_ID}"
          gh run download "${WF_ID}"
          PR=$(cat ./pr/pr.txt)
          MERGED=$(cat ./pr/merged.txt)
          ACTION=$(cat ./pr/action.txt)
          echo "PR_NO=${PR}" >> $GITHUB_ENV
          echo "MERGE_STATUS=${MERGED}" >> $GITHUB_ENV
          echo "PR_ACTION=${ACTION}" >> $GITHUB_ENV

          # Remove the pr artifact directory so that it does not
          # appear in listings or confuse git with untracked files.
          rm -rf ./pr

      # If this is a push event to main, such as a merge from a PR, store in directory main.
      - name: Set HTML dir for merges to main
        if: env.MERGE_STATUS == 'true'
        run: |
          echo "HTML_DIR=main" >> $GITHUB_ENV
      # If this is a PR, store in a directory with pattern review/pr-${PR_NO}.
      - name: Set HTML dir for PRs
        if: env.MERGE_STATUS == 'false'
        run: |
          echo "HTML_DIR=review/pr-${{ env.PR_NO }}" >> $GITHUB_ENV
          echo "Setting HTML dir for PR to: review/pr-${{ env.PR_NO }}"
      - name: Move HTML files from the artifact to the pages directory
        run: |
          mkdir review 2>/dev/null || true 
          rm -rf "${{ env.HTML_DIR }}"
          mv ./html-build-artifact/ "${{ env.HTML_DIR }}"
          ls -asl "${{ env.HTML_DIR }}"
      - name: Deploy HTML
        run: |
          git config user.name docs-preview
          git config user.email do-not-send-@github.com
          git add "${{ env.HTML_DIR }}"
          git status
          git commit -m 'Adding HTML directory.' || (echo "Nothing changed." && exit 0)
          git push
      - name: Add HTML review URL comment to PR
        if: env.MERGE_STATUS == 'false' && env.PR_ACTION == 'opened'
        env:
          URL: ${{ needs.get-gh-pages-url.outputs.url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          echo -e "## Documentation preview" > body
          echo -e "" >> body
          echo -e "<${{ env.URL }}${{ env.HTML_DIR }}>" >> body
          cat body
          gh pr comment ${{ env.PR_NO }} --body-file body
          
  remove-html:
    runs-on: ubuntu-latest
    needs: [get-gh-pages-url]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-gh-pages-url.outputs.branch }}
      - name: Download PR artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh run view "${WF_ID}"
          gh run download "${WF_ID}" -n pr -D pr
          PR=$(cat ./pr/pr.txt)
          MERGED=$(cat ./pr/merged.txt)
          echo "PR_NO=${PR}" >> $GITHUB_ENV
          echo "MERGE_STATUS=${MERGED}" >> $GITHUB_ENV
      - name: Delete and commit HTML review directory
        if: env.MERGE_STATUS == 'true'
        run: |
          git config user.name docs-preview
          git config user.email do-not-send-@github.com
          git rm -r review/pr-${{ env.PR_NO }}
          git commit -m 'Removing HTML review directory.'
          git push
