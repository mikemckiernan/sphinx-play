name: docs-preview-pr

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [main]

jobs:

  # Check that the proposed code builds to HTML without errors.
  build-html:
    if: github.event.pull_request.action != 'closed'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.9.7]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install Sphinx==3.5.4
      - name: Make HTML
        run: |
          pushd docs
          make html
          popd
      - name: Directory listing
        run: ls -asl docs/build/html
      - uses: actions/upload-artifact@v2
        with:
          name: html-build-artifact
          path: docs/build/html
          if-no-files-found: error
          retention-days: 1

  # Check that the target repository of the PR is configured for GitHub Pages.
  get-gh-pages-url:
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.api-resp.outputs.html_url }}
      branch: ${{ steps.api-resp.outputs.branch }}
    steps:
      - name: Check for GitHub Pages
        id: api-resp
        uses: actions/github-script@v5
        with:
          script: |
            const pages_url = [process.env.GITHUB_API_URL, "repos", process.env.GITHUB_REPOSITORY, "pages"].join("/")
            console.log("Request to GitHub API for GitHub Pages URL: " + pages_url)
            try {
              const resp = await github.request(pages_url)
              if (resp.status == "200") {
                console.log("GitHub Pages are configured and available at: " + resp.data.html_url)
                console.log("  ..and deployed from branch: " + resp.data.source.branch)
                core.setOutput('html_url', resp.data.html_url)
                core.setOutput('branch', resp.data.source.branch)
              }
              console.log(resp)
            } catch (err) {
              console.log("Request to GitHub API for Pages failed with message: " + err)
            }
            core.setOutput('html_url', '')
            core.setOutput('branch', '')

  # Identify the dir for the HTML.
  # TODO: Use the PR number rather than the branch.
  store-html:
    runs-on: ubuntu-latest
    needs: [build-html, get-gh-pages-url]
    if: needs.get-gh-pages-url.outputs.url != ''
    steps:
      # If this is a push event to main, such as a merge from a PR...
      - name: Set HTML dir for merges to main
        if: github.event.ref == 'refs/heads/main'
        run: |
          echo "HTML_DIR=main" >> $GITHUB_ENV
      # If this is a PR...
      - name: Set HTML dir for PRs
        if: github.event_name == 'pull_request'
        run: |
          echo "HTML_DIR=review/pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "Setting HTML dir for PR to: " ${{ env.HTML_DIR }}
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: html-build-artifact
          path: artifacts
      - name: List files
        run: ls -asl artifacts
      - name: Deploy HTML
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: ${{ needs.get-gh-pages-url.outputs.branch }}
          folder: ${{ steps.download.outputs.download-path }}
          target-folder: ${{ env.HTML_DIR }}
      - name: Add HTML review URL to PR
        if: github.event.pull_request.action == 'opened'
        run: |
          echo "URL=$(echo ${{ needs.get-gh-pages-url.outputs.url }}/review/pr-${PR_NO})" >> $GITHUB_ENV
          gh pr comment ${PR_NO} --body "## Documentation preview\n${env.URL}"
        env:
          PR_NO: ${{ github.event.pull_request.number }}

  remove-html:
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref != 'main'
    runs-on: ubuntu-latest
    needs: [get-gh-pages-url]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-gh-pages-url.outputs.branch }}
      - name: Delete and commit HTML review directory
        run: |
          git config user.name docs-preview
          git config user.email do-not-send-@github.com
          git rm -r review/pr-${{ github.event.pull_request.number }}
          git commit -m 'Removing HTML review directory.'
          git push
